{"version":3,"file":"ngx-strings.js","sources":["ng://ngx-strings/lib/ngx-strings.service.ts","ng://ngx-strings/lib/ngx-strings.component.ts","ng://ngx-strings/lib/directives/uppercase.directive.ts","ng://ngx-strings/lib/directives/lowercase.directive.ts","ng://ngx-strings/lib/directives/titlecase.directive.ts","ng://ngx-strings/lib/directives/initialcase.directive.ts","ng://ngx-strings/lib/directives/linelimit.directive.ts","ng://ngx-strings/lib/directives/stringcut.directive.ts","ng://ngx-strings/lib/directives/emailcut.directive.ts","ng://ngx-strings/lib/directives/replacer.directive.ts","ng://ngx-strings/lib/ngx-strings.module.ts","ng://ngx-strings/public-api.ts","ng://ngx-strings/ngx-strings.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxStringsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-strings',\n  template: `\n    <p>\n      ngx-strings works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class NgxStringsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[ngxUpperCase]'\n})\nexport class UppercaseDirective {\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.setStyle(this.el.nativeElement, 'text-transform', 'uppercase');\n  }\n}\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[ngxLowerCase]'\n})\nexport class LowercaseDirective {\n \n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.setStyle(this.el.nativeElement, 'text-transform', 'lowercase');\n  }\n\n}\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[ngxTitleCase]'\n})\nexport class TitlecaseDirective {\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.setStyle(this.el.nativeElement, 'text-transform', 'capitalize');\n  }\n\n}\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[ngxInitialCase]'\n})\nexport class InitialcaseDirective {\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.setStyle(this.el.nativeElement, 'text-transform', 'initial');\n  }\n\n}\n","import { Directive, ElementRef, Renderer2, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[ngxLineLimit]'\n})\nexport class LinelimitDirective implements OnInit {\n\n  @Input() lines: string;\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n\n  }\n  ngOnInit() {\n    this.renderer.setStyle(this.el.nativeElement, 'overflow', 'hidden');\n    this.renderer.setStyle(this.el.nativeElement, 'display', '-webkit-box');\n    this.renderer.setStyle(this.el.nativeElement, '-webkit-line-clamp', this.lines);\n    this.renderer.setStyle(this.el.nativeElement, '-webkit-box-orient', 'vertical');\n  }\n\n}\n","import { Directive, Input, ElementRef, Renderer2, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[ngxStringSlicer]'\n})\nexport class StringcutDirective implements OnInit {\n\n  @Input() start: number;\n  @Input() end: number;\n  @Input() overflow: boolean;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n\n  }\n  ngOnInit() {\n    let actualText: string;\n    actualText = this.el.nativeElement.textContent;\n    actualText = actualText.slice(this.start, this.end)\n    if (this.overflow === true) {\n      this.el.nativeElement.textContent = actualText + \"...\";\n    } else {\n      this.el.nativeElement.textContent = actualText;\n    }\n  }\n}\n","import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[ngxEmailSlicer]'\n})\nexport class EmailcutDirective {\n\n  @Input() invalid: string;\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n\n  }\n  ngOnInit() {\n    let actualText: string;\n    this.invalid = this.invalid ? this.invalid : 'Invalid Email!';\n    actualText = this.el.nativeElement.textContent;\n    if (actualText.includes('@') && actualText.includes('.')) {\n      let email = actualText.split('@');\n      let pre = '';\n      let post = '';\n      pre = email[0].trim();\n      post = email[1].trim();\n      pre = pre.slice(0, -5);\n      post = post.substr(1, post.length);\n      this.el.nativeElement.textContent = pre + '****' + post;\n    } else {\n      this.el.nativeElement.textContent = this.invalid;\n      this.renderer.setStyle(this.el.nativeElement, 'color', 'crimson');\n      this.renderer.setStyle(this.el.nativeElement, 'font-weight', 'bold');\n    }\n  }\n}\n","import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[ngxStringReplacer]'\n})\nexport class ReplacerDirective {\n\n  @Input() from: string;\n  @Input() to: string;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n\n  }\n  ngOnInit() {\n    let find = this.from;\n    let re = new RegExp(find, 'g');\n\n    let actualText: string;\n    actualText = this.el.nativeElement.textContent;\n    actualText = actualText.replace(re, this.to);\n    this.el.nativeElement.textContent = actualText;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxStringsComponent } from './ngx-strings.component';\nimport { UppercaseDirective } from './directives/uppercase.directive';\nimport { LowercaseDirective } from './directives/lowercase.directive';\nimport { TitlecaseDirective } from './directives/titlecase.directive';\nimport { InitialcaseDirective } from './directives/initialcase.directive';\nimport { LinelimitDirective } from './directives/linelimit.directive';\nimport { StringcutDirective } from './directives/stringcut.directive';\nimport { EmailcutDirective } from './directives/emailcut.directive';\nimport { ReplacerDirective } from './directives/replacer.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxStringsComponent,\n    UppercaseDirective,\n    LowercaseDirective,\n    TitlecaseDirective,\n    InitialcaseDirective,\n    LinelimitDirective,\n    StringcutDirective,\n    EmailcutDirective,\n    ReplacerDirective],\n  imports: [\n  ],\n  exports: [\n    NgxStringsComponent,\n    UppercaseDirective,\n    LowercaseDirective,\n    TitlecaseDirective,\n    InitialcaseDirective,\n    LinelimitDirective,\n    StringcutDirective,\n    EmailcutDirective,\n    ReplacerDirective]\n})\nexport class NgxStringsModule { }\n","/*\n * Public API Surface of ngx-strings\n */\n\nexport * from './lib/ngx-strings.service';\nexport * from './lib/ngx-strings.component';\nexport * from './lib/ngx-strings.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {EmailcutDirective as ɵg} from './lib/directives/emailcut.directive';\nexport {InitialcaseDirective as ɵd} from './lib/directives/initialcase.directive';\nexport {LinelimitDirective as ɵe} from './lib/directives/linelimit.directive';\nexport {LowercaseDirective as ɵb} from './lib/directives/lowercase.directive';\nexport {ReplacerDirective as ɵh} from './lib/directives/replacer.directive';\nexport {StringcutDirective as ɵf} from './lib/directives/stringcut.directive';\nexport {TitlecaseDirective as ɵc} from './lib/directives/titlecase.directive';\nexport {UppercaseDirective as ɵa} from './lib/directives/uppercase.directive';"],"names":[],"mappings":"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"}